-- Challenge - Joining on multiple tables, Sakila db
-- 1 List the number of films per category.
select cat.name, count(1) as number_of_films
from sakila.film as f-- creating an alias
inner join sakila.film_category as f_cat
	on f.film_id = f_cat.film_id
      -- same as on orders.orderNumber = orderdetails.orderNumber, as they have the exact same name
inner join sakila.category as cat
	on cat.category_id = f_cat.category_id
group by cat.name;

-- 2 Retrieve the store ID, city, and country for each store.
select co.country, ci.city, sto.store_id
from sakila.country as co
inner join sakila.city as ci
	using(country_id)
inner join sakila.address as ad
	using(city_id)
inner join sakila.store as sto
	using(address_id)
order by sto.store_id;

-- 3 Calculate the total revenue generated by each store in dollars.
select sta.staff_id, concat('$',sum(pa.amount)) as total_revenue
from sakila.payment as pa
inner join sakila.staff as sta
	using(staff_id)
-- inner join sakila.store as sto
-- 	using(address_id)
group by sta.staff_id; -- no revenue for the stores with the 2nd join... used only the address of staff to define the store
-- to check the revenue is not empty... and it was not
select customer_id, staff_id, sum(amount) as total_revenue
from payment
group by customer_id, staff_id;

-- 4. Determine the average running time of films for each category.
select cat.name, concat(floor(avg(f.length)/60), ' h ', round(avg(length) % 60, ' mn')) as average_time
from sakila.film as f
inner join sakila.film_category as f_cat
	using(film_id)
inner join sakila.category as cat
	using(category_id)
group by cat.name;

-- BONUS
-- 5 Identify the film categories with the longest average running time.
select cat.name, avg(f.length) as average_time_minutes
from sakila.film as f
inner join sakila.film_category as f_cat
	using(film_id)
inner join sakila.category as cat
	using(category_id)
group by cat.name
order by avg(f.length) desc
limit 1;

-- 6 Display the top 10 most frequently rented movies in descending order.
select f.title, count(1) 
from sakila.film as f
inner join sakila.inventory as i
	using(film_id)
inner join sakila.rental as r
	using(inventory_id)
group by f.title
having count(1)>=31
order by count(1) desc -- removed the limit 10 because we have seen there are many at 31
;
-- 7 Determine if "Academy Dinosaur" can be rented from Store 1.
select film.title
from sakila.film as film
inner join sakila.inventory as inv
	using (film_id)
inner join sakila.rental as rent
	using (inventory_id)
inner join sakila.payment as pay
	using(customer_id)
inner join sakila.staff as sta
	on sta.staff_id = pay.staff_id
inner join sakila.store as sto
	using(address_id)
where film.title like '%Academy Dinosaur%' and sto.store_id = 1;

-- 8 Provide a list of all distinct film titles, along with their availability status in the inventory. 
select distinct film.title, inventory.film_id,
CASE 
	when inventory.film_id is null 	then 'not available'
	else 'available'
end as availability
from film
left join inventory
	using(film_id);

